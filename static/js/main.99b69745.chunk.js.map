{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["request","url","option","fetch","then","res","json","Error","status","statusText","PostsList","React","memo","selectedUserId","selectedPostId","onSelectPostId","useState","posts","setPosts","useEffect","userId","response","getUserPosts","loadedPosts","className","length","map","post","title","type","onClick","id","NewCommentForm","onAdd","postId","name","email","body","newComment","setNewComment","handlerInput","event","target","uuidv4","value","onSubmit","preventDefault","method","headers","JSON","stringify","addComment","placeholder","onChange","required","PostDetails","postDetails","setPostDetails","postComments","setPostComments","isVisibleComments","setIsVisibleComments","getDetails","detailsFromServer","getComments","Promise","all","removeComment","commentId","deleteComment","deletedComment","filter","comments","hidden","comment","App","users","setUsers","setSelectedUserId","setSelectedPostId","usersFromServer","selectPostId","useCallback","String","Number","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99b69745.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, option?: RequestInit) => {\n  return fetch(`${BASE_URL}/${url}`, option)\n    .then(res => res.json())\n    .then(res => {\n      if (res.Error) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res;\n    });\n};\n","import React, { useEffect, useState } from 'react';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\nimport { getUserPosts } from '../../api/posts';\n\ninterface Props {\n  selectedUserId: number,\n  selectedPostId: number,\n  onSelectPostId: (postId: number) => void,\n}\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  selectedUserId,\n  selectedPostId,\n  onSelectPostId,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    const loadPosts = () => {\n      getUserPosts(selectedUserId)\n        .then(loadedPosts => setPosts(loadedPosts));\n    };\n\n    loadPosts();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {posts.length\n        ? (\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li\n                className=\"PostsList__item\"\n                key={post.id}\n              >\n                <div>\n                  <b>{`[User ${post.userId}]: `}</b>\n                  {post.title}\n                </div>\n\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={post.id !== selectedPostId\n                    ? () => onSelectPostId(post.id)\n                    : () => onSelectPostId(0)}\n                >\n                  {post.id !== selectedPostId\n                    ? 'Open'\n                    : 'Close'}\n                </button>\n              </li>\n            ))}\n          </ul>\n        )\n        : (\n          <p>Not posts</p>\n        )}\n    </div>\n  );\n});\n","import { request } from './api';\nimport { Post } from '../types/Post';\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => {\n  let response;\n\n  if (!userId) {\n    response = 'posts';\n  } else {\n    response = `posts?userId=${userId}`;\n  }\n\n  return request(response);\n};\n\nexport const getPostDetails = (postId: number): Promise<Post> => {\n  return request(`post/${postId}`);\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { v4 as uuidv4 } from 'uuid';\nimport { addComment } from '../../api/comments';\nimport { Comment } from '../../types/Comment';\n\ninterface Props {\n  onAdd: (comment: Comment) => void,\n  postId: number,\n}\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({\n  onAdd,\n  postId,\n}) => {\n  const [newComment, setNewComment] = useState({\n    id: '',\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const {\n    id, name, email, body,\n  } = newComment;\n\n  const handlerInput = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    switch (event.target.name) {\n      case 'id':\n        setNewComment({\n          id: uuidv4(),\n          name,\n          email,\n          body,\n        });\n        break;\n\n      case 'name':\n        setNewComment({\n          id,\n          name: event.target.value,\n          email,\n          body,\n        });\n        break;\n\n      case 'email':\n        setNewComment({\n          id,\n          name,\n          email: event.target.value,\n          body,\n        });\n        break;\n\n      case 'body':\n        setNewComment({\n          id,\n          name,\n          email,\n          body: event.target.value,\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const reset = () => {\n    setNewComment({\n      id: '',\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  const hendlerSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    addComment(id, postId, name, email, body)\n      .then((res: Comment) => {\n        onAdd(res);\n      });\n\n    reset();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={hendlerSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={handlerInput}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={handlerInput}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={handlerInput}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n","import { request } from './api';\n\nexport const getPostComments = (postId: number) => {\n  return request(`comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: string) => {\n  return request(`comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addComment = (\n  id: string,\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => (\n  request('comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      id,\n      postId,\n      name,\n      email,\n      body,\n    }),\n  })\n);\n","import React, { useEffect, useState } from 'react';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, deleteComment } from '../../api/comments';\n\ninterface Props {\n  selectedPostId: number,\n}\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  selectedPostId,\n}) => {\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isVisibleComments, setIsVisibleComments] = useState(true);\n\n  const getDetails = () => {\n    getPostDetails(selectedPostId)\n      .then(detailsFromServer => setPostDetails(detailsFromServer));\n  };\n\n  const getComments = () => {\n    getPostComments(selectedPostId);\n  };\n\n  useEffect(() => {\n    Promise.all([getDetails(), getComments()]);\n  }, [selectedPostId]);\n\n  const showComment = () => {\n    setIsVisibleComments(!isVisibleComments);\n  };\n\n  const addNewComment = (newComment: Comment) => {\n    setPostComments([\n      ...postComments,\n      newComment,\n    ]);\n  };\n\n  const removeComment = (commentId: string) => {\n    deleteComment(commentId)\n      .then(deletedComment => {\n        if (deletedComment) {\n          setPostComments(\n            postComments.filter(comments => comments.id !== commentId),\n          );\n        }\n      });\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {postComments.length\n          ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              hidden={PostDetails.length < 1}\n              onClick={showComment}\n            >\n              {\n                `${isVisibleComments ? 'Hide' : 'Show'}\n                ${postComments.length}\n                ${postComments.length < 2 ? 'comment' : 'comments'}`\n              }\n            </button>\n          ) : (\n            <p\n              className=\"PostDetails__list-item\"\n            >\n              No comments yet. You can leave a comment first &#9660;\n            </p>\n          )}\n\n        {isVisibleComments\n          && (\n            <ul className=\"PostDetails__list\">\n              {postComments.map(comment => (\n                <li\n                  className=\"PostDetails__list-item\"\n                  key={comment.id}\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => removeComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            onAdd={addNewComment}\n            postId={selectedPostId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllUsers } from './api/users';\nimport { User } from './types/User';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    getAllUsers()\n      .then(usersFromServer => setUsers(usersFromServer));\n  }, []);\n\n  const selectUserId = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(Number(event.target.value));\n  };\n\n  const selectPostId = useCallback((postId: number) => {\n    setSelectedPostId(postId);\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={String(selectedUserId)}\n            onChange={selectUserId}\n          >\n            <option\n              key=\"0\"\n              value=\"0\"\n            >\n              All users\n            </option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            selectedPostId={selectedPostId}\n            onSelectPostId={selectPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? <PostDetails selectedPostId={selectedPostId} />\n            : (\n              <h2>\n                No post selected\n              </h2>\n            )}\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getAllUsers = () => {\n  return request('users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}